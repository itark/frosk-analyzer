# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Build with Maven
      run: mvn -B package --file pom.xml
    - run: mvn --batch-mode --update-snapshots verify
    - run: mkdir staging && cp target/*.jar staging
    - uses: actions/upload-artifact@v4
      with:
        name: frosk-analyzer
        path: staging
        retention-days: 1

    - name: Find release and upload the JAR file
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Check if the release with tag 'test-tag' exists
        release_id=$(gh release view test-tag --json id --jq ".id")

        # If release exists, upload and overwrite the JAR file
        if [ -n "$release_id" ]; then
          gh release upload test-tag staging/*.jar --clobber
        else
          echo "Release with tag 'test-tag' not found."
          exit 1
        fi
